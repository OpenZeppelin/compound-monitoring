---
# MegaLinter GitHub Action configuration file
# More info at https://megalinter.github.io
name: MegaLinter

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  pull_request:
    branches: [master, main]
    types: [opened, reopened, labeled]

env: # Comment env block if you do not want to apply fixes
  # Apply linter fixes configuration
  APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
  APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
  APPLY_FIXES_MODE: pull_request # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR ()
  PRINT_ALL_FILES: true

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: MegaLinter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # MegaLinter
      - name: MegaLinter
        id: ml
        # More info at https://megalinter.github.io/flavors/
        uses: oxsecurity/megalinter/flavors/javascript@v6
        env:
          # https://megalinter.github.io/configuration/
          VALIDATE_ALL_CODEBASE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # CUSTOM SETTINGS FOR MEGALINTER
          REPORT_OUTPUT_FOLDER: megalinter-reports
          FORMATTERS_DISABLE_ERRORS: true # Treat formatting as a warning
          DISABLE: COPYPASTE # Disable categories of linters
          DISABLE_LINTERS: JAVASCRIPT_STANDARD

          SHOW_ELAPSED_TIME: true
          FILEIO_REPORTER: false

          # eslint
          JAVASCRIPT_ES_CONFIG_FILE: .github/eslintrc.js
          # cspell settings
          SPELL_CSPELL_CONFIG_FILE: .github/cspell.json
          SPELL_CSPELL_DISABLE_ERRORS: true # Treat misspellings as a warning
          # proselint settings
          SPELL_PROSELINT_CONFIG_FILE: .github/proselintrc.json
          SPELL_PROSELINT_DISABLE_ERRORS: true # Treat misspellings as a warning
          # markdownlint
          MARKDOWN_MARKDOWNLINT_CONFIG_FILE: .github/markdownlint.json
          # markdown link check
          MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE: .github/markdown-link-check.json
          MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS: true # Treat dead links as a warning
          # checkov settings
          REPOSITORY_CHECKOV_CONFIG_FILE: .github/checkov.yml
          REPOSITORY_CHECKOV_DISABLE_ERRORS: true # Disable errors until we decide how to handle this one.
          # Other linters
          REPOSITORY_GIT_DIFF_DISABLE_ERRORS: true
          COPYPASTE_JSCPD_DISABLE_ERRORS: true
          REPOSITORY_TRIVY_ARGUMENTS: --ignore-policy .github/trivy.rego
          ACTION_ACTIONLINT_FILTER_REGEX_EXCLUDE: (defender-sentinel-deployer.yml)
          REPOSITORY_GITLEAKS_CONFIG_FILE: .github/gitleaks.toml
          REPOSITORY_SECRETLINT_CONFIG_FILE: .github/secretlintrc.json
          REPOSITORY_SECRETLINT_ARGUMENTS: --secretlintignores "**/megalinter-reports/**"

      # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports

      # Create pull request if applicable
      # Note: This step will fail if megalinter tries to modify any file in the .github/workflow
      # directory. Github has a protection that workflows can't modify workflows. Please fix those
      # files manually.
      - name: Restore Workflow and github_conf Directories
        if: ${{ always() }}
        run: |
          git restore .github/workflows/*.yml
          sudo rm -rf github_conf

      - name: Create Pull Request with applied fixes
        id: cpr
        if: ${{ always() }}
        # Use head_ref when PR is created and ref_name when manually run
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          commit-message: "[MegaLinter] Apply linter automatic fixes"
          title: "[MegaLinter] Fixes for ${{ env.BRANCH_NAME }}"
          labels: bot
          base: ${{ env.BRANCH_NAME }}
          branch: auto-fix/${{ env.BRANCH_NAME }}
          delete-branch: true # Deletes temp branch after close or merge.
      - name: Create PR output
        if: ${{ always() }}
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
